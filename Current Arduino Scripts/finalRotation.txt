#include "PinNames.h"
#include <Wire.h>
#include "Adafruit_TCS34725.h"
#include <Arduino_APDS9960.h>
const unsigned int DELAY = 1000/6;
const byte numChars = 32;
char receivedChars[numChars];
boolean newData = false;
boolean rotate = false;
int currentLED = 0;

uint16_t maxVal = 0;
Adafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_50MS, TCS34725_GAIN_1X);
#include <Servo.h> 

Servo myservo;




int pos = 0; 

void setup() {
    Serial.begin(9600);
    while (!Serial);
      if (tcs.begin()) {
    Serial.println("Found sensor");
  } else {
    Serial.println("No TCS34725 found ... check your connections");
    while (1);
  }
  
    myservo.attach(6);
    
    Serial.println("<Arduino is ready>");


  if (!APDS.begin()) {
    Serial.println("Error initializing APDS9960 sensor!");
  }

}

void loop() {
    recvWithStartEndMarkers();
    processNewData();
   // checkAlignment();
    
}

void recvWithStartEndMarkers() {
    static boolean recvInProgress = false;
    static byte ndx = 0;
    char startMarker = '<';
    char endMarker = '>';
    char rc;
 
    while (Serial.available() > 0 && newData == false) {
        rc = Serial.read();

        if (recvInProgress == true) {
            if (rc != endMarker) {
                receivedChars[ndx] = rc;
                ndx++;
                if (ndx >= numChars) {
                    ndx = numChars - 1;
                }
            }
            else {
                receivedChars[ndx] = '\0'; // terminate the string
                recvInProgress = false;
                ndx = 0;
                newData = true;
            }
        }

        else if (rc == startMarker) {
            recvInProgress = true;
        }
    }
}

void processNewData() {
    if (newData == true) {
        newData = false;
    

    if(strcmp(receivedChars, "ALIGNMENT_START") == 0){
      rotate = true;
      myservo.writeMicroseconds(1600);
      checkAlignment();
      currentLED = 1;
    }

    if(strcmp(receivedChars, "QR_ALIGNED") == 0){
      rotate = false;
    }
 
    }
    
}


//Acutate is called when it is time to turn the motor 
//currently simulating the LED blinking





void checkAlignment(){


  uint16_t r, g, b, c, colorTemp, lux, maxBlue, prevB;
  double mean, sumofDif, varience,sd;
   tcs.getRawData(&r, &g, &b, &c);

while(b < 400){
  tcs.getRawData(&r, &g, &b, &c);
 
  Serial.println(b);


}

     myservo.writeMicroseconds(1500);

  }
